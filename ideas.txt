# Turn image into ANSI (w/ optimization for font type)


* Go font renderer - has bdf to pixfont importer (unscii has bdf intermediate)
https://github.com/pbnjay/pixfont


* Go image similarity scorer
https://github.com/rivo/duplo

* Color similarity/ distance and proper colorspace
github.com/lucasb-eyer/go-colorful

* Quantization
https://github.com/Nykakin/QuantizationTournament
https://github.com/esimov/colorquant

Derive a palette for the image (terminal / ANSI colours)
Take the input image and slice into cells of given cw+ch
For each cell
  * quantize to find the dominant fg,bg colors to use
  
  * find a threshold that preserves the most *detail* or structure,
    * make a black on white with threshold of the cell's pixels

  * compare silhouette to each font glyph looking for the closest image structure

  * refit the selected glyph structure 

  * emit an ANSI sequence for fg,bg and the best matching glyph

# Vendoring

Adjust pixmap.PixFont to expose it's charmap
Adjust duplo to use a smaller image tile for matching db
